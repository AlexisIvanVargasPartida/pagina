<h1 class="text-center"><i>Herramientas y Técnicas para incrementar la calidad del código en tu proyecto</i></h1>
<h5 class="text-center">
    <p class="pservices text-justify">
        Ingeniero en software Eduardo Figarola Mota, egresado de Colima, desarrollador en Michelada.io, con experiencia en Ruby y EmberJS.</p>
    <br>
    <div class="container">
        <div class="row">
            <div class="col-sm-12">
                <a href="#" class="thumbnail">
                <img class="center-block"  src="/img/conf4/1.jpg">
                </a>

            </div>
        </div>
    </div>
    <br>
    <p class="pservices text-justify">En esta inusual empresa aparte de micheladas y parrilladas, se comenta que la alimentación es muy importante, además de una buena relajación.
    </p>
    <br>
    <p class="pservices text-justify">
        Se menciona que el software perfecto no existe, lo bueno es que el software de gran cálidad si existe, dicha cálidad se puede medir de diversas maneras:
    </p>
    <ul>
    <ol>Debe cumplir con su propósito</ol>
    <ol>Informa adecuadamente cuando ocurre algún problema</ol>
    <ol>Tiene pruebas</ol>
    <ol>Se entiende su intención con solo leerlo</ol>
    <ol>Sigue un estilo de código desde el inicio</ol>
    <ol>Utiliza un flujo de colaboración adecuado</ol>
    <ol>Implementa correctamente los patrones de diseño</ol>
    <ol>Se puede utilizar intuitivamente</ol>
    </ul>
    <br>
    <p align="left">Manejo e Informe de errores:</p>
    <br>
    <p class="pservices text-justify">Es importante hacerle saber al usuario/desarrollador que algo ha ido mal en el código o causa. Si el error no fue culpa del usuario, se vale no entrar en detalles técnicos.
    </p>
    <br>
    <p align="left">Ejemplos de Sistemas monitores de errores:</p>
    <br>
    <ul>
    <ol>BugSnag</ol>
    <ol>HoneyBadger</ol>
    <ol>Sentry</ol>
    <ol>Airbrake.io</ol>
    </ul>
    <br>
    <p align="left">Pruebas Unitarias:</p>
    <br>
    <p class="pservices text-justify">Encargadas de revisar que las unidades mínimas de código (clases) hagan lo que tengan que hacer.
    </p>
    <br>
    <p align="left">Herramientas para escribir pruebas:</p>
    <br>
    <ul>
    <ol>Ruby(Minitest,Rspec)</ol>
    <ol>JavaScript(Jasmine,Mocha)</ol>
    <ol>PHP</ol>
    <ol>Java</ol>
    </ul>
    <br>
    <p align="left">Pruebas de Integración:</p>
    <br>
    <ul>
    <ol>Ruby(Minitest,Rspec)</ol>
    <ol>JavaScript(Jasmine,Mocha)</ol>
    </ul>
    <br>
    <p align="left">Pruebas de Función:</p>
    <br>
    <ul>
    <ol>Ruby(Capybara,Cucumber)</ol>
    <ol>JavaScript(Protractor, NightWatch, Cypress)</ol>
    </ul>
    <br>
    <p align="left">Cobertura de nuestras pruebas:</p>
    <br>
    <p class="pservices text-justify">Es el porcentaje de lineas de nuestro código.
    </p>
    <br>
    <p align="left">Legibilidad y estilo:</p>
    <br>
    <p class="pservices text-justify">El código debe ser entendible y seguir un estilo determinado.
    </p>
    <br>
    <p align="left">Linters:</p>
    <br>
    <p class="pservices text-justify">Herramientas que nos permiten detectar fallas en nuestras pruebas, eliminando impurezas.
    </p>
    <br>
    <ul>
    <ol>Ruby-Rubocop</ol>
    <ol>JS-ESLint</ol>
    <ol>Phan</ol>
    </ul>
    <br>
    <p align="left">Control de cambios:</p>
    <br>
    <ul>
    <ol>Git</ol>
    <ol>Mercurial</ol>
    <ol>Subversion</ol>
    </ul>
    <br>
    <p align="left">Reglas Importantes:</p>
    <br>
    <ul>
    <ol>Definir una rama estable para producción</ol>
    <ol>Definir una rama para el ámbiente de integración (Stage)</ol>
    <ol>Definir el estándar para nombrar las ramas de trabajos individuales</ol>
    <ol>Definir un estándar para los commit messages</ol>
    <ol>Definir un estándar para la revisión del código</ol>
    </ul>
    <br>
    <p align="left">Integración Continua:</p>
    <br>
    <ul>
    <ol>Jenkins</ol>
    <ol>Travis CI</ol>
    <ol>Circle CI</ol>
    </ul>
    <br>
    <p align="left">¿Qué es un build?</p>
    <br>
    <p class="pservices text-justify">Una versión específica de nuestro software.
    </p>
    <br>
    <p align="left">Githooks(Scritps que corren en determinado momento):</p>
    <br>
    <ul>
    <ol>Pre-commit</ol>
    <ol>Pre-push</ol>
    </ul>
    <br>
</h5>


